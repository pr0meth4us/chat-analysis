# Chat Analysis API - Clean HTTP Client
# Variables for configuration
@host = http://localhost:5001/api
@boundary = ----FormBoundary

# File paths - UPDATE THESE FOR YOUR SYSTEM
#@chat_file = 'C:\Users\phear\Downloads\Telegram Desktop\all_chats\flat_chats\chatlogs-channel1020721583440011399-@20220101-20230516.html'
@zip_file = "/Users/nicksng/Desktop/school/aupp/code/google-drive-html-downloader/all_chats.zip"
#@json_file = C:\Users\phear\PycharmProjects\chat-analysis\2025-06-14T151732.200.json

# Analysis configuration
@modules_to_run = analyze_conversation_patterns,sentiment_analysis,message_frequency
@me_list = ["MyUsername", "Me"]
@remove_list = ["Bot", "System", "Deleted Account"]
@other_label = Contact

# Session variables (will be set automatically)
# @session_id = (auto-set from responses)
# @task_id = (auto-set from responses)

### ===========================================
### 1. UPLOAD & PROCESSING
### ===========================================

### Upload single chat file
POST {{host}}/upload
Content-Type: multipart/form-data; boundary={{boundary}}

--{{boundary}}
Content-Disposition: form-data; name="files"; filename="chat.html"
Content-Type: text/html

< {{chat_file}}
--{{boundary}}--

> {%
client.test("Handle upload response", function() {
    if (response.status === 200) {
        client.global.set("session_id", response.body.session_id);
        console.log("‚úÖ Upload completed immediately");
        console.log("Session:", response.body.session_id);
        console.log("Messages:", response.body.message);
    } else if (response.status === 202) {
        client.global.set("task_id", response.body.task_id);
        client.global.set("session_id", response.body.session_id);
        console.log("üîÑ Upload processing in background");
        console.log("Task ID:", response.body.task_id);
    } else {
        console.log("‚ùå Upload failed:", response.body.error);
    }
});
%}

###

### Upload ZIP file (always background)
POST {{host}}/upload-zip
Content-Type: multipart/form-data; boundary=----WorkflowBoundary

------WorkflowBoundary
Content-Disposition: form-data; name="zipfile"; filename="test_chats.zip"
Content-Type: application/zip

< {{zip_file}}

------WorkflowBoundary--

> {%
client.test("ZIP upload", function() {
    client.assert(response.status === 202, "ZIP should be processed in background");
    client.global.set("task_id", response.body.task_id);
    client.global.set("session_id", response.body.session_id);
    console.log("üîÑ ZIP processing started");
    console.log("Task ID:", response.body.task_id);
});
%}

###

### Check task status (use after background processing)
GET {{host}}/task-status/{{task_id}}

> {%
const status = response.body?.status;
const progress = response.body?.progress || 0;

console.log(`üìä Status: ${status} (${progress.toFixed(1)}%)`);

if (status === "completed") {
    console.log("‚úÖ Processing complete!");
    if (response.body.unique_senders) {
        console.log("üë• Senders:", response.body.unique_senders.join(", "));
    }
} else if (status === "failed") {
    console.log("‚ùå Processing failed:", response.body.error);
} else if (status === "running") {
    console.log("üîÑ Still processing...");
}
%}

### ===========================================
### 2. MESSAGE FILTERING & MANAGEMENT
### ===========================================

### Filter processed messages
POST {{host}}/filter
Content-Type: application/json

{
  "me": ["Me","Neron","Neternal Soeung","Ni","konkhmerlaorlek1","neron - ·ûé·û∫·ûö·üâ·ûº·ûì","neron - ·ûº·ûì","xeno.bozo"],
  "remove": ["Jockie Music (1)"],
  "other_label": "smt"
}

> {%
if (response.status === 200) {
    console.log("üîç Filtering completed");
    console.log("üìä Messages processed");
} else {
    console.log("‚ùå Filtering failed:", response.body.error);
}
%}

###

### Get stored messages for current session
GET {{host}}/get_stored_messages

> {%
if (response.status === 200) {
    console.log("üì® Messages retrieved");
    console.log("üìä Count:", Array.isArray(response.body) ? response.body.length : "Unknown");
} else {
    console.log("‚ùå No messages found:", response.body.error);
}
%}

### ===========================================
### 3. ANALYSIS
### ===========================================

### Check if analysis is possible
GET {{host}}/can-analyze

> {%
client.test("Check analysis readiness", function() {
    console.log("Can analyze:", response.body.can_analyze);
    if (response.body.can_analyze) {
        console.log("üìä Messages available:", response.body.message_count);
        console.log("üìù Type:", response.body.message_type);
    } else {
        console.log("‚ö†Ô∏è No messages available for analysis");
    }
});
%}

###

### Start analysis (auto sync/async based on size)
POST {{host}}/analyze
Content-Type: application/json

{}

> {%
client.test("Analysis request", function() {
    if (response.status === 200) {
        console.log("‚úÖ Analysis completed immediately");
        console.log("üìä Report generated");
    } else if (response.status === 202) {
        client.global.set("analysis_task_id", response.body.task_id);
        console.log("üîÑ Analysis started in background");
        console.log("Task ID:", response.body.task_id);
    } else {
        console.log("‚ùå Analysis failed:", response.body.error);
    }
});
%}

###

### Force background analysis
POST {{host}}/analyze?background=true
Content-Type: application/json

{}

> {%
client.test("Background analysis", function() {
    client.assert(response.status === 202, "Should force background processing");
    client.global.set("analysis_task_id", response.body.task_id);
    console.log("üîÑ Forced background analysis");
    console.log("Task ID:", response.body.task_id);
});
%}

###

### Analyze with specific modules (from file)
POST {{host}}/analyze
Content-Type: multipart/form-data; boundary={{boundary}}

--{{boundary}}
Content-Disposition: form-data; name="modules_to_run"

{{modules_to_run}}
--{{boundary}}
Content-Disposition: form-data; name="file"; filename="messages.json"
Content-Type: application/json

< {{json_file}}
--{{boundary}}--

> {%
client.test("Analysis with modules", function() {
    if (response.status === 200) {
        console.log("‚úÖ Targeted analysis completed");
    } else if (response.status === 202) {
        client.global.set("analysis_task_id", response.body.task_id);
        console.log("üîÑ Targeted analysis in background");
    }
});
%}

###

### Check analysis status
GET {{host}}/task-status/{{analysis_task_id}}

> {%
const status = response.body?.status;
const progress = response.body?.progress || 0;

console.log(`üìà Analysis: ${status} (${progress.toFixed(1)}%)`);

if (status === "completed") {
    console.log("‚úÖ Analysis complete!");
    if (response.body.data?.analysis_report) {
        const report = response.body.data.analysis_report;
        console.log("üìä Report sections:", Object.keys(report).join(", "));
    }
} else if (status === "failed") {
    console.log("‚ùå Analysis failed:", response.body.error);
}
%}

### ===========================================
### 4. SESSION MANAGEMENT
### ===========================================

### Get all session tasks
GET {{host}}/tasks/session

> {%
console.log("üóÇÔ∏è Session:", response.body.session_id);
console.log("üìã Tasks:", Object.keys(response.body.tasks || {}).length);

Object.entries(response.body.tasks || {}).forEach(([id, task]) => {
    console.log(`  ‚Ä¢ ${id.substring(0, 8)}... - ${task.status} (${task.progress || 0}%)`);
});
%}

###

### Cancel a task (if pending)
POST {{host}}/cancel-task/{{task_id}}

> {%
if (response.status === 200) {
    console.log("‚úÖ Task cancelled");
} else {
    console.log("‚ö†Ô∏è Cannot cancel:", response.body.error);
}
%}

###

### Clear session data
POST {{host}}/clear

> {%
console.log("üßπ Session cleared:", response.body.message);
client.global.clear("session_id");
client.global.clear("task_id");
client.global.clear("analysis_task_id");
%}

### ===========================================
### 5. COMPLETE WORKFLOWS
### ===========================================

### WORKFLOW A: Quick File Analysis
# 1. POST {{host}}/upload (with small file)
# 2. POST {{host}}/filter (optional)
# 3. POST {{host}}/analyze
# 4. Results available immediately

### WORKFLOW B: Large Dataset Analysis
# 1. POST {{host}}/upload-zip
# 2. GET {{host}}/task-status/{{task_id}} (wait for completion)
# 3. POST {{host}}/filter
# 4. POST {{host}}/analyze?background=true
# 5. GET {{host}}/task-status/{{analysis_task_id}} (wait for completion)

### WORKFLOW C: Analysis with Custom Modules
# 1. Ensure messages are uploaded and filtered
# 2. POST {{host}}/analyze (with modules_to_run and file)
# 3. Monitor progress if background processing

### ===========================================
### 6. DEBUGGING & UTILITIES
### ===========================================

### Debug: Check what's available in session
GET {{host}}/can-analyze

###

### Debug: Get raw stored messages
GET {{host}}/get_stored_messages

###

### Debug: Session overview
GET {{host}}/session-tasks

###

### Emergency: Clear everything
POST {{host}}/clear

###
POST {{host}}/search/fuzzy
Content-Type: application/json

{
  "query": "saek tv der lg nv na ot",
  "cutoff": 70
}

