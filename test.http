# Chat Analysis API – PyCharm HTTP Client (Updated for Background Tasks)
@host = http://localhost:5001/api
@boundary = ----Boundary

###
GET {{host}}/task-status/35dce24a-c647-44fd-8b55-bf2e1907926a

### Upload one or more chat files (smart processing - sync for small files, async for large)
POST {{host}}/upload
Content-Type: multipart/form-data; boundary={{boundary}}

--{{boundary}}
Content-Disposition: form-data; name="files"; filename="chat1.html"
Content-Type: text/html

< C:\Users\phear\Downloads\Telegram Desktop\all_chats\flat_chats\chatlogs-channel1020721583440011399-@20220101-20230516.html
--{{boundary}}

> {%
    client.test("Upload should handle response", function() {
        if (response.status === 200) {
            // Synchronous processing completed
            client.assert(response.body.session_id, "Should have session_id");
            client.assert(response.body.message, "Should have success message");
            client.global.set("session_id", response.body.session_id);
            console.log("✅ Immediate processing completed");
            console.log("Messages processed:", response.body.message);
            console.log("Unique senders:", response.body.unique_senders?.length || 0);
        } else if (response.status === 202) {
            // Asynchronous processing started
            client.assert(response.body.task_id, "Should have task_id");
            client.assert(response.body.status === "processing", "Should be processing");
            client.global.set("task_id", response.body.task_id);
            client.global.set("session_id", response.body.session_id);
            console.log("🔄 Background processing started");
            console.log("Task ID:", response.body.task_id);
            console.log("Use task-status endpoint to monitor progress");
        } else {
            client.assert(false, "Unexpected response status: " + response.status);
        }
    });
%}

###

### Upload & extract a ZIP archive of chat files (always asynchronous)
POST {{host}}/upload-zip
Content-Type: multipart/form-data; boundary=----Boundary

------Boundary
Content-Disposition: form-data; name="zipfile"; filename="all_chats.zip"
Content-Type: application/zip

< C:\Users\phear\Downloads\Telegram Desktop\all_chats.zip
------Boundary--

> {%
    client.test("ZIP upload should be accepted for background processing", function() {
        client.assert(response.status === 202, "Expected status 202 (Accepted)");
        client.assert(response.body.task_id, "Should have task_id");
        client.assert(response.body.status === "processing", "Should be processing");
        client.global.set("task_id", response.body.task_id);
        client.global.set("session_id", response.body.session_id);
        console.log("🔄 ZIP processing started in background");
        console.log("Task ID:", response.body.task_id);
        console.log("Session ID:", response.body.session_id);
    });
%}

###

### Check task status and progress (use this to monitor background processing)
GET {{host}}/task-status/cdbf43fe-922c-424a-85d5-c201f67bc743 completed successfully.

> {%
    client.test("Task status should be available", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.task_id, "Should have task_id");

        const status = response.body.status;
        const progress = response.body.progress || 0;

        console.log("📊 Task Status:", status);
        console.log("📈 Progress:", progress.toFixed(1) + "%");

        if (response.body.created_at) {
            console.log("⏰ Created:", response.body.created_at);
        }
        if (response.body.started_at) {
            console.log("🚀 Started:", response.body.started_at);
        }

        switch(status) {
            case "pending":
                console.log("⏳ Task is waiting to start...");
                break;
            case "running":
                console.log("🔄 Task is currently processing...");
                break;
            case "completed":
                console.log("✅ Task completed successfully!");
                if (response.body.message) {
                    console.log("📝 Result:", response.body.message);
                }
                if (response.body.unique_senders) {
                    console.log("👥 Unique senders:", response.body.unique_senders.length);
                    console.log("🏷️ Senders:", response.body.unique_senders.join(", "));
                }
                if (response.body.completed_at) {
                    console.log("🏁 Completed:", response.body.completed_at);
                }
                break;
            case "failed":
                console.log("❌ Task failed!");
                if (response.body.error) {
                    console.log("💥 Error:", response.body.error);
                }
                break;
            case "timeout":
                console.log("⏰ Task timed out!");
                if (response.body.error) {
                    console.log("💥 Error:", response.body.error);
                }
                break;
            default:
                console.log("❓ Unknown status:", status);
        }
    });
%}

###

### Get all tasks for current session
GET {{host}}/analysis-status/60f558f7-8120-4599-ba2e-3001fde80381

> {%
    client.test("Should retrieve session tasks", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.session_id, "Should have session_id");
        client.assert(response.body.tasks, "Should have tasks object");

        const tasks = response.body.tasks;
        const taskCount = Object.keys(tasks).length;

        console.log("🗂️ Session ID:", response.body.session_id);
        console.log("📋 Total tasks:", taskCount);

        if (taskCount > 0) {
            console.log("\n📝 Task Summary:");
            Object.entries(tasks).forEach(([taskId, task]) => {
                console.log(`  • ${taskId.substring(0, 8)}... - ${task.status} (${task.progress}%)`);
                if (task.error) {
                    console.log(`    ❌ Error: ${task.error}`);
                }
            });
        } else {
            console.log("📭 No tasks found for this session");
        }
    });
%}

###

### Cancel a pending task
POST {{host}}/cancel-task/{{task_id}}

> {%
    client.test("Task cancellation", function() {
        if (response.status === 200) {
            console.log("✅ Task cancelled successfully");
            console.log("📝 Message:", response.body.message);
        } else if (response.status === 400) {
            console.log("⚠️ Cannot cancel task");
            console.log("📝 Reason:", response.body.error);
        } else {
            client.assert(false, "Unexpected response status: " + response.status);
        }
    });
%}

###

### Alternative: Check processing status by session ID (if this endpoint exists)
GET {{host}}/status/{{session_id}}

> {%
    client.test("Session status check", function() {
        if (response.status === 200) {
            console.log("✅ Session status retrieved");
            console.log("📊 Status:", JSON.stringify(response.body, null, 2));
        } else {
            console.log("ℹ️ Session status endpoint may not be available");
        }
    });
%}

###

### Filter, relabel & dedupe processed messages (only after processing is complete)
POST {{host}}/filter
Content-Type: application/json

{
  "me": {{ME_LIST}},
  "remove": {{REMOVE_LIST}},
  "other_label": "{{OTHER_LABEL}}"
}

> {%
    client.test("Filter should succeed", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.filtered_count !== undefined, "Should have filtered_count");
        console.log("🔍 Filtering completed");
        console.log("📊 Filtered count:", response.body.filtered_count);
    });
%}

###

### Retrieve stored processed messages for current session
GET {{host}}/cf2d9863-1316-4d97-b77f-6e72d2fb4ba6

> {%
    client.test("Should retrieve messages", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.messages, "Should have messages array");
        console.log("📨 Message type:", response.body.message_type);
        console.log("📊 Message count:", response.body.count);
        console.log("👥 Unique senders:", response.body.unique_senders?.join(", ") || "None");
    });
%}
###
GET {{host}}/task-status/5d03806a-088b-4af4-b456-61ac85939cfc

### Method 1: Send JSON file as multipart/form-data (recommended)
POST {{host}}/analyze
Content-Type: multipart/form-data; boundary={{boundary}}

--{{boundary}}
Content-Disposition: form-data; name="modules_to_run"

analyze_conversation_patterns
--{{boundary}}
Content-Disposition: form-data; name="file"; filename="messages.json"
Content-Type: application/json

< C:\Users\phear\PycharmProjects\chat-analysis\2025-06-14T151732.200.json
--{{boundary}}--

> {%
    client.test("Analysis with JSON file should succeed", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.analysis_report, "Should have analysis_report");
        console.log("Analysis completed successfully");
    });
%}
### Analyze filtered messages (session fallback)
POST {{host}}/analyze
Content-Type: application/json

{}

> {%
    client.test("Analysis should complete", function() {
        if (response.status === 200) {
            console.log("📈 Analysis completed successfully");
            console.log("📊 Results:", JSON.stringify(response.body, null, 2));
        } else {
            console.log("⚠️ Analysis failed or no data available");
            console.log("📝 Response:", JSON.stringify(response.body, null, 2));
        }
    });
%}

###

### Count occurrences of a keyword per sender
POST {{host}}/count_keyword
Content-Type: application/json

{
  "keyword": "hello"
}

> {%
    client.test("Keyword count should complete", function() {
        if (response.status === 200) {
            console.log("🔍 Keyword search completed");
            console.log("📊 Results:", JSON.stringify(response.body, null, 2));
        } else {
            console.log("⚠️ Keyword search failed");
            console.log("📝 Response:", JSON.stringify(response.body, null, 2));
        }
    });
%}

###

### Clear all session data (including background tasks)
POST {{host}}/clear

> {%
    client.test("Clear should succeed", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.message.includes("cleared"), "Should confirm clearing");
        console.log("🧹 Session data cleared");
        console.log("📝 Message:", response.body.message);

        // Clear stored variables
        client.global.clear("task_id");
        client.global.clear("session_id");
        console.log("🗑️ Local variables cleared");
    });
%}

###

### === WORKFLOW EXAMPLES ===

### 🔄 WORKFLOW 1: Complete ZIP Processing Workflow
### Step 1: Upload ZIP file
POST {{host}}/upload-zip
Content-Type: multipart/form-data; boundary=----WorkflowBoundary

------WorkflowBoundary
Content-Disposition: form-data; name="zipfile"; filename="test_chats.zip"
Content-Type: application/zip

< C:\Users\phear\Downloads\Telegram Desktop\test_chats.zip
------WorkflowBoundary--

> {%
    if (response.status === 202) {
        client.global.set("workflow_task_id", response.body.task_id);
        client.global.set("workflow_session_id", response.body.session_id);
        console.log("🚀 WORKFLOW STARTED");
        console.log("📋 Task ID:", response.body.task_id);
        console.log("🔗 Session ID:", response.body.session_id);
        console.log("⏭️ Next: Poll task status until complete");
    }
%}

###

### Step 2: Monitor task progress (run multiple times)
GET {{host}}/task-status/{{workflow_task_id}}

> {%
    const status = response.body.status;
    const progress = response.body.progress || 0;

    console.log(`🔄 WORKFLOW STATUS: ${status} (${progress.toFixed(1)}%)`);

    if (status === "completed") {
        console.log("✅ PROCESSING COMPLETE! Ready for next step.");
        console.log("⏭️ Next: Filter messages (optional) or retrieve messages");
    } else if (status === "failed" || status === "timeout") {
        console.log("❌ PROCESSING FAILED!");
        console.log("💥 Error:", response.body.error);
    } else {
        console.log("⏳ Still processing... Check again in a few seconds");
    }
%}

###

### Step 3: Filter messages (optional, only after completion)
POST {{host}}/filter
Content-Type: application/json

{
  "me": ["MyUsername"],
  "remove": ["Bot", "System"],
  "other_label": "Contact"
}

> {%
    if (response.status === 200) {
        console.log("🔍 FILTERING COMPLETE");
        console.log("📊 Filtered count:", response.body.filtered_count);
        console.log("⏭️ Next: Retrieve or analyze messages");
    }
%}

###

### Step 4: Retrieve processed messages
GET {{host}}/get_stored_messages

> {%
    if (response.status === 200) {
        console.log("📨 MESSAGES RETRIEVED");
        console.log("📊 Count:", response.body.count);
        console.log("👥 Senders:", response.body.unique_senders?.join(", "));
        console.log("🎉 WORKFLOW COMPLETE!");
    }
%}

###

### 🔄 WORKFLOW 2: Quick File Upload Test
### Test with a small file (should process immediately)
POST {{host}}/upload
Content-Type: multipart/form-data; boundary=----QuickTest

------QuickTest
Content-Disposition: form-data; name="files"; filename="small_chat.html"
Content-Type: text/html

< C:\path\to\small\chat\file.html
------QuickTest--

> {%
    if (response.status === 200) {
        console.log("⚡ QUICK PROCESSING COMPLETE");
        console.log("📝 Message:", response.body.message);
        console.log("👥 Senders:", response.body.unique_senders?.join(", "));
        client.global.set("quick_session_id", response.body.session_id);
    } else if (response.status === 202) {
        console.log("🔄 File was large, moved to background processing");
        client.global.set("quick_task_id", response.body.task_id);
        client.global.set("quick_session_id", response.body.session_id);
    }
%}

###

### 🧪 TESTING: Multiple file upload
POST {{host}}/upload
Content-Type: multipart/form-data; boundary=----MultiFile

------MultiFile
Content-Disposition: form-data; name="files"; filename="chat1.html"
Content-Type: text/html

< C:\path\to\chat1.html
------MultiFile
Content-Disposition: form-data; name="files"; filename="chat2.json"
Content-Type: application/json

< C:\path\to\chat2.json
------MultiFile--

> {%
    console.log("📁 MULTI-FILE UPLOAD");
    if (response.status === 200) {
        console.log("⚡ Processed immediately");
    } else if (response.status === 202) {
        console.log("🔄 Processing in background");
        client.global.set("multi_task_id", response.body.task_id);
    }
    console.log("📊 Response:", JSON.stringify(response.body, null, 2));
%}

###

### 🔧 DEBUGGING: Check all session tasks
GET {{host}}/session-tasks

> {%
    console.log("🔍 DEBUG: All session tasks");
    console.log("📋 Tasks:", JSON.stringify(response.body.tasks, null, 2));
%}

###

### 🛑 EMERGENCY: Cancel all pending tasks in session
# Note: You'll need to get task IDs from session-tasks first, then cancel individually
# POST {{host}}/cancel-task/{task_id_here}

### Check if analysis can be performed
GET {{host}}/can-analyze

> {%
    client.test("Should check analysis availability", function() {
        client.assert(response.status === 200, "Expected status 200");
        console.log("Can analyze:", response.body.can_analyze);
        console.log("Message count:", response.body.message_count);
        console.log("Message type:", response.body.message_type);

        if (response.body.session_id) {
            client.global.set("session_id", response.body.session_id);
        }
    });
%}

###

### Analyze messages (automatic background for large datasets)
POST {{host}}/analyze
Content-Type: application/json

{}

> {%
    client.test("Analysis request should succeed", function() {
        // Could be 200 (synchronous) or 202 (background)
        client.assert(response.status === 200 || response.status === 202, "Expected status 200 or 202");

        if (response.status === 202) {
            // Background processing
            client.assert(response.body.task_id, "Should have task_id for background processing");
            client.global.set("analysis_task_id", response.body.task_id);
            console.log("Analysis started in background, task_id:", response.body.task_id);
        } else {
            // Synchronous processing
            client.assert(response.body.analysis_report, "Should have analysis_report");
            console.log("Analysis completed synchronously");
        }
    });
%}

###

### Force background analysis (even for small datasets)
POST {{host}}/analyze-background
Content-Type: application/json

{}

> {%
    client.test("Background analysis should be started", function() {
        client.assert(response.status === 202, "Expected status 202");
        client.assert(response.body.task_id, "Should have task_id");
        client.global.set("analysis_task_id", response.body.task_id);
        console.log("Forced background analysis started, task_id:", response.body.task_id);
    });
%}

###

### Check analysis status by task ID
GET {{host}}/analysis-status/cf2d9863-1316-4d97-b77f-6e72d2fb4ba6

> {%
    client.test("Analysis status should be available", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.task_id, "Should have task_id");

        console.log("Analysis Status:", response.body.status);
        console.log("Progress:", response.body.progress + "%");
        console.log("Stage:", response.body.stage);
        console.log("Message:", response.body.message);

        // If completed, log results
        if (response.body.status === "completed") {
            console.log("Analysis completed!");
            console.log("Report available:", response.body.report_available);
        }

        // If failed, log error
        if (response.body.status === "failed") {
            console.log("Analysis failed:", response.body.error);
        }
    });
%}

###

### Check analysis status by session ID
GET {{host}}/analysis-status-by-session/{{session_id}}

> {%
    client.test("Session analysis status should be available", function() {
        client.assert(response.status === 200, "Expected status 200");
        console.log("Session Analysis Status:", response.body.status);
        console.log("Progress:", response.body.progress + "%");
    });
%}

###

### Get analysis result after completion
GET {{host}}/analysis-result/8c93e1b1-be28-4123-b366-8ba64c8c682b

> {%
    client.test("Analysis result should be available", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.analysis_report, "Should have analysis_report");

        console.log("Analysis report keys:", Object.keys(response.body.analysis_report));

        // Log some basic info if available
        if (response.body.analysis_report.summary) {
            console.log("Summary available:", !!response.body.analysis_report.summary);
        }
    });
%}

###

### Analyze with explicit message data (JSON payload)
POST {{host}}/analyze
Content-Type: application/json

{
  "filtered_messages": [
    {
      "source": "test",
      "sender": "user1",
      "message": "Hello world",
      "timestamp": "2024-01-01T12:00:00Z"
    },
    {
      "source": "test",
      "sender": "user2",
      "message": "Hi there",
      "timestamp": "2024-01-01T12:01:00Z"
    }
  ]
}

> {%
    client.test("Analysis with explicit data should work", function() {
        client.assert(response.status === 200 || response.status === 202, "Expected status 200 or 202");

        if (response.status === 200) {
            client.assert(response.body.analysis_report, "Should have analysis_report");
        }
    });
%}

###

### Force background processing with query parameter
POST {{host}}/analyze?background=true
Content-Type: application/json

{}

> {%
    client.test("Background parameter should force background processing", function() {
        client.assert(response.status === 202, "Expected status 202 for background processing");
        client.assert(response.body.task_id, "Should have task_id");
    });
%}

###

### Complete workflow example:

### Step 1: Check if we can analyze
# GET {{host}}/can-analyze

### Step 2a: Start analysis (may be sync or async)
# POST {{host}}/analyze

### Step 2b: OR force background analysis
# POST {{host}}/analyze-background

### Step 3: If background (status 202), poll for completion
# GET {{host}}/analysis-status/{task_id}

### Step 4: Get the final result
# GET {{host}}/analysis-result/{session_id}

###

### Example with file upload (if you have a JSON file with filtered_messages)
POST {{host}}/analyze
Content-Type: multipart/form-data; boundary=----AnalysisBoundary

------AnalysisBoundary
Content-Disposition: form-data; name="file"; filename="filtered_messages.json"
Content-Type: application/json

< C:\path\to\your\filtered_messages.json
------AnalysisBoundary--

###

### Test error handling - analyze without messages
POST {{host}}/analyze
Content-Type: application/json

{
  "filtered_messages": []
}

> {%
    client.test("Empty messages should return error", function() {
        client.assert(response.status === 400, "Expected status 400");
        client.assert(response.body.error, "Should have error message");
    });
%}